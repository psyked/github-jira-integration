const rp = require("request-promise");
const base64 = require("base-64");
const url = require("url");
const log = require("../logger");

const { JIRA_BASE_URL, JIRA_TOKEN, JIRA_USERNAME } = require("../../config");

const createIssue = async (options = {}) => {
    const { issueType, projectId, ...restOfOptions } = options;

    const requiredProperties = {
        JIRA_USERNAME,
        JIRA_TOKEN,
        JIRA_BASE_URL,
        issueType,
        projectId
    };

    Object.keys(requiredProperties).forEach(key => {
        if (requiredProperties[key] === undefined) {
            log.error(
                {
                    projectId,
                    issueType
                },
                `Missing configuration, ${key} is required when creating JIRA issues`
            );
            throw new Error(`${key} is required`);
        }
    });

    const defaults = {
        labels: ["automated"],
        description: "Generated by github-jira"
    };

    const payload = Object.assign(defaults, restOfOptions);

    var options = {
        method: "POST",
        uri: url.resolve(JIRA_BASE_URL, "/rest/api/2/issue"),
        headers: {
            Authorization: `Basic ${base64.encode(`${JIRA_USERNAME}:${JIRA_TOKEN}`)}`,
            "Content-Type": "application/json"
        },
        body: {
            fields: {
                project: {
                    id: projectId
                },
                issuetype: {
                    name: issueType
                },
                ...payload
            }
        },
        json: true
    };
    try {
        const data = await rp(options);
        log.info(
            {
                projectId,
                issueType,
                payload
            },
            `Jira issue created`
        );
        return data;
    } catch (err) {
        log.error(err);
        throw new Error("Failed to make new JIRA issue");
        return Promise.reject();
    }
};

module.exports = {
    createIssue
};
